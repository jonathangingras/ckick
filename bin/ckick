#!/usr/bin/env ruby

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

lib = File.join(File.dirname(File.dirname(File.realpath(__FILE__))), 'lib')
$LOAD_PATH << lib unless $LOAD_PATH.include?(lib)

require "fileutils"
require "json"
require "pathname"
require "ckick"

def new_
  raise "bad usage" if ARGV[1].nil?
  raise "file or directory already exists" if Dir.exist?(ARGV[1])
  raise "bad project name containing non-alphanumeric characters" unless ARGV[1].match(/^[[A-z][0-9]]+$/)

  FileUtils.mkdir_p(ARGV[1])
  Dir.chdir(ARGV[1])

  project = CKick::Project.new(
    CKick::load_ckickfile(CKick::RESOURCE_DIR, "default_cxx_project.json"))
  project.set_name(ARGV[1])

  h = project.to_hash
  h[:root] = Pathname.new(File.absolute_path(project.path)).relative_path_from(Pathname.pwd).to_s
  lines = JSON.pretty_generate(h, {indent: "  "}).split("\n")
  lines.collect! do |line|
    if line[2] == '"'
      line = "\n" + line
    end
    line
  end
  lines[1][0] = ""
  file_content = lines.join("\n")

  File.new("CKickfile", "w") << file_content
end

def kick_
  if !ARGV[0].nil? && ARGV[0] == "kick"
    raise "no such directory: #{ARGV[0]}" unless Dir.exist?(ARGV[1])
    Dir.chdir(ARGV[1])
  elsif ARGV.size == 0 || Dir.exist?(ARGV[0])
  else
    raise "bad usage"
  end
  project = CKick::Project.new(CKick::load_ckickfile)
  project.create_structure
end

COMMANDS = {
  kick: method(:kick_),
  new: method(:new_),
  #build: method(:build_)
}

def main
  command = :kick

  if ARGV.size == 1
    if COMMANDS.include?(ARGV[0].to_sym)
      if Dir.exist?(ARGV[0])
        raise "first argument `#{ARGV[0]}' is ambiguous: a directory entry and a command exist with this name"
      else
        command = ARGV[0].to_sym
      end
    else
      raise "no such directory: #{ARGV[0]}" unless Dir.exist?(ARGV[0])
      Dir.chdir(ARGV[0])
    end
  elsif ARGV.size > 1
    raise "no such command: #{ARGV[0]}" unless COMMANDS.include?(ARGV[0].to_sym)
    command = ARGV[0].to_sym
  end

  CKick::load_builtin_plugins

  COMMANDS[command].call
end

main
