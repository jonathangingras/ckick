#!/usr/bin/env ruby

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

lib = File.join(File.dirname(File.dirname(File.realpath(__FILE__))), 'lib')
$LOAD_PATH << lib unless $LOAD_PATH.include?(lib)

require "fileutils"
require "rake"
require "json"
require "pathname"
require "ckick"


$cmake_options = []

module CKick
  module CLI
    COMMANDS = CommandHash.new(
      kick:   method(:kick),
      new:    method(:new_project),
      build:  method(:build),
      '-b':   method(:build),
      test:   method(:test),
      '-t':   method(:test),
      addexe: method(:add_exe),
      addlib: method(:add_lib),
      addto:  method(:add_to),
      link:   method(:link),
      adddir: method(:add_dir),
    )
  end
end


def main
  command = "kick"

  args = []

  if ARGV.size >= 1
    if CKick::CLI::COMMANDS.has_command?(ARGV[0])
      raise "first argument `#{ARGV[0]}' is ambiguous: a directory entry and a command exist with this name, use -b
" if Dir.exist?(ARGV[0])
      command = ARGV[0]
      args = ARGV[1..-1]
    else
      begin
        Dir.chdir(ARGV[0])
      rescue
        raise "no such file or directory: `#{ARGV[0]}'"
      end
      if !ARGV[1].nil?
        raise "no such command: #{ARGV[1]}" unless CKick::CLI::COMMANDS.has_command?(ARGV[1])
        command = ARGV[1]
        args = ARGV[2..-1]
      else
        args = ARGV[1..-1]
      end
    end
  end

  CKick::load_builtin_plugins

  CKick::CLI::COMMANDS[command].call(*args)
end


CKick::CLI.wrapped { main }
